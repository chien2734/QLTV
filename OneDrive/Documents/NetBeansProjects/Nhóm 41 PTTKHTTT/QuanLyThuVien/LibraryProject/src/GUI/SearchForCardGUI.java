/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI;

import BLL.CardBUS;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import DTO.CardDTO;

/**
 *
 * @author HUY LONG
 */
public class SearchForCardGUI extends javax.swing.JPanel {
    private CardBUS cardBUS = new CardBUS();
    private DefaultTableModel tableModel;
    /**
     * Creates new form SearchForCard
     */
    public SearchForCardGUI() {
        initComponents();
        setSize(new Dimension(this.getMaximumSize().width, this.getMaximumSize().height));
        this.tableCard.getTableHeader().setFont(new Font("Roboto",1,20));
        this.tableCard.getTableHeader().setBackground(new Color(187,222,251));
        this.tableCard.setFont(new Font("Roboto",0,18));
        this.tableCard.setRowHeight(50);
        tableModel = (DefaultTableModel) tableCard.getModel();
        loadDataIntoTable(cardBUS.getAllActivatedCards());
        SearchAction searchAction = new SearchAction();
        btnTimKiem.addActionListener(searchAction);
    }
    
    public void loadDataIntoTable(ArrayList<CardDTO> list) {
        if (!list.isEmpty()) {
            for (CardDTO card : list) {
                Object[] data = new Object[]{card.getMaTheMuon(), card.getTenDN(),
                    card.getNgayDK().toString(), card.getTrangThai()};
                tableModel.addRow(data);
                tableModel.fireTableDataChanged();
            }
        }
    }

    public void deleteDataInTable() {
        int soLuongDong = tableCard.getRowCount();
        if (soLuongDong != 0) {
            for (int i = soLuongDong - 1; i >= 0; i--) {
                tableModel.removeRow(i);
                tableModel.fireTableDataChanged();
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtTenDN = new javax.swing.JTextField();
        txtNgayDK = new javax.swing.JTextField();
        btnTimKiem = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableCard = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(1600, 600));
        setLayout(null);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tìm kiếm thông tin thẻ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 18))); // NOI18N
        jPanel3.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("Tên đăng nhập:");
        jPanel3.add(jLabel1);
        jLabel1.setBounds(370, 40, 130, 30);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setText("Ngày đăng ký:");
        jPanel3.add(jLabel2);
        jLabel2.setBounds(370, 150, 120, 30);

        txtTenDN.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jPanel3.add(txtTenDN);
        txtTenDN.setBounds(520, 30, 350, 50);

        txtNgayDK.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jPanel3.add(txtNgayDK);
        txtNgayDK.setBounds(520, 130, 350, 50);

        btnTimKiem.setBackground(new java.awt.Color(153, 204, 255));
        btnTimKiem.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnTimKiem.setForeground(new java.awt.Color(255, 255, 255));
        btnTimKiem.setText("Tìm kiếm");
        jPanel3.add(btnTimKiem);
        btnTimKiem.setBounds(570, 290, 210, 40);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 0, 0));
        jLabel3.setText("Định dạng: yyyy-MM-dd, vd: 2024-04-30");
        jPanel3.add(jLabel3);
        jLabel3.setBounds(530, 190, 340, 21);

        add(jPanel3);
        jPanel3.setBounds(140, 10, 1350, 380);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Bảng thông tin thẻ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 18))); // NOI18N
        jPanel2.setLayout(null);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(1600, 600));

        tableCard.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã thẻ", "Tên đăng nhập", "Ngày đăng ký"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tableCard.setPreferredSize(new java.awt.Dimension(1600, 600));
        jScrollPane1.setViewportView(tableCard);

        jPanel2.add(jScrollPane1);
        jScrollPane1.setBounds(30, 30, 1580, 490);

        add(jPanel2);
        jPanel2.setBounds(20, 400, 1630, 540);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnTimKiem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableCard;
    private javax.swing.JTextField txtNgayDK;
    private javax.swing.JTextField txtTenDN;
    // End of variables declaration//GEN-END:variables
    class SearchAction implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {

            String tenDN = txtTenDN.getText().trim();
            String ngayDK = txtNgayDK.getText().trim();
            if (tenDN.isEmpty() && ngayDK.isEmpty()) {
                JOptionPane.showMessageDialog(null,
                        "Hãy nhập thông tin để tìm kiếm !!!");
            } else {
                String condition = "";
                if (!tenDN.isEmpty()) {
                    if (condition.isEmpty()) {
                        condition += "MaDG LIKE '%" + tenDN + "%' ";
                    } else {
                        condition += "AND MaDG LIKE '%" + tenDN + "%' ";
                    }
                }
                if (!ngayDK.isEmpty()) {
                        if (isValidNgayDK(ngayDK).equals("Ngày không hợp lệ hoặc không đúng định dạng !!!")) {
                            JOptionPane.showMessageDialog(null, 
                                    isValidNgayDK(ngayDK));
                        } else {
                            if (condition.isEmpty()) {
                                condition += "ngayDK = '" + ngayDK + "'";
                            } else {
                                condition += "AND ngayDK = '" + ngayDK + "'";
                            }
                        }
                    }


                if (!condition.isEmpty()) {
                    ArrayList<CardDTO> list = cardBUS.getCardsBycondition(condition);
                    if (list.isEmpty()) {
                        deleteDataInTable();
                        JOptionPane.showMessageDialog(null,
                                "Không tìm thấy !!!");
                    } else {
                        deleteDataInTable();
                        loadDataIntoTable(list);
                    }
                }
            }

        }

        private String isValidNgayDK(String ngayDK) {
            try {
                SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
                simpleDateFormat.setLenient(false);
                simpleDateFormat.parse(ngayDK);
                return "Ngày hợp lệ !!!";
            } catch (Exception e) {
                System.out.println(e);
                return "Ngày không hợp lệ hoặc không đúng định dạng !!!";
            }
        }
        
    }
}
