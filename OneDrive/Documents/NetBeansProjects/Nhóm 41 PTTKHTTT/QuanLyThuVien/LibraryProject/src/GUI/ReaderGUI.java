/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI;

import BLL.CardBUS;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.sql.Date;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import BLL.ReaderBUS;
import DTO.CardDTO;
import DTO.ReaderDTO;

/**
 *
 * @author HUY LONG
 */
public class ReaderGUI extends javax.swing.JPanel {
    private CardBUS cardBUS = new CardBUS();
    private ReaderBUS readerBUS = new ReaderBUS();
    private DefaultTableModel tableModel;
    private int indexUpdate;
    /**
     * Creates new form Reader
     */
    public ReaderGUI() {
        initComponents();
        setSize(new Dimension(this.getMaximumSize().width, this.getMaximumSize().height));
        this.tableReader.getTableHeader().setFont(new Font("Roboto",1,20));
        this.tableReader.getTableHeader().setBackground(new Color(187,222,251));
        this.tableReader.setFont(new Font("roboto",0,18));
        this.tableReader.setRowHeight(50);
        this.tableReader.setPreferredScrollableViewportSize(new Dimension(1600,600));
        this.buttonGroup1.add(rbtnKichHoat);
        this.buttonGroup1.add(rbtnKhongKichHoat);
        this.rbtnKichHoat.setSelected(true);
        indexUpdate = -1;
        this.jPopupMenu1.add(jMenuItem1);
        this.jPopupMenu1.add(jMenuItem2);
        this.jPopupMenu1.add(jMenuItem3);
        this.jPopupMenu1.add(jMenuItem4);
        DisplayMenu disPlayMenu = new DisplayMenu();
        this.tableReader.addMouseListener(disPlayMenu);
        tableModel = (DefaultTableModel) tableReader.getModel();
        loadDataIntoTable();
        AddAction addAction = new AddAction();
        removeAction removeAction = new removeAction();
        UpdateAction updateAction = new UpdateAction();
        LockAction lockAction = new LockAction();
        UnlockAction unlockAction = new UnlockAction();
        this.btnThem.addActionListener(addAction);
        this.jMenuItem1.addActionListener(removeAction);
        this.jMenuItem2.addActionListener(updateAction);
        this.jMenuItem3.addActionListener(lockAction);
        this.jMenuItem4.addActionListener(unlockAction);
        this.rbtnKhongKichHoat.setEnabled(false);
    }
    
    public void loadDataIntoTable() {
        ArrayList<ReaderDTO> list = readerBUS.getAllReaders();
        if (!list.isEmpty()) {
            for (ReaderDTO reader : list) {
                Object[] data = new Object[]{reader.getTenDN(), reader.getMatKhau(),
                    reader.getTenDG(), reader.getSDT(), reader.getEmail(),
                    reader.getDiaChi(), reader.getTrangThai()};
                tableModel.addRow(data);
                tableModel.fireTableDataChanged();
            }
        }
    }

    public void deleteDataInTable() {
        int soLuongDong = tableReader.getRowCount();
        if (soLuongDong != 0) {
            for (int i = soLuongDong - 1; i >= 0; i--) {
                tableModel.removeRow(i);
            }
        }
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableReader = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtTenDN = new javax.swing.JTextField();
        txtTenDG = new javax.swing.JTextField();
        txtSDT = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        txtMatKhau = new javax.swing.JPasswordField();
        txtXacNhan = new javax.swing.JPasswordField();
        rbtnKichHoat = new javax.swing.JRadioButton();
        rbtnKhongKichHoat = new javax.swing.JRadioButton();
        cbbDiaChi = new javax.swing.JComboBox<>();
        btnThem = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();

        jMenuItem1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jMenuItem1.setText("Xóa");

        jMenuItem2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jMenuItem2.setText("Sửa");

        jMenuItem3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jMenuItem3.setText("Khóa");

        jMenuItem4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jMenuItem4.setText("Kích hoạt");

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(1600, 600));
        setLayout(null);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Bảng thông tin độc giả", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 18))); // NOI18N
        jPanel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jPanel1.setLayout(null);

        tableReader.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        tableReader.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tên đăng nhập", "Mật khẩu", "Tên độc giả", "SDT", "Email", "Địa chỉ", "Trạng thái"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableReader);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(20, 28, 1621, 430);

        add(jPanel1);
        jPanel1.setBounds(0, 0, 1667, 480);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thông tin", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 18))); // NOI18N
        jPanel2.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("Tên đăng nhập:");
        jPanel2.add(jLabel1);
        jLabel1.setBounds(185, 38, 123, 25);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setText("Mật khẩu:");
        jPanel2.add(jLabel2);
        jLabel2.setBounds(205, 148, 78, 25);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setText("Xác nhận mật khẩu:");
        jPanel2.add(jLabel3);
        jLabel3.setBounds(160, 250, 155, 25);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel4.setText("Tên độc giả:");
        jPanel2.add(jLabel4);
        jLabel4.setBounds(1064, 38, 96, 25);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel5.setText("SĐT:");
        jPanel2.add(jLabel5);
        jLabel5.setBounds(1094, 124, 36, 25);

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel6.setText("Email:");
        jPanel2.add(jLabel6);
        jLabel6.setBounds(1090, 230, 46, 25);

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel7.setText("Địa chỉ:");
        jPanel2.add(jLabel7);
        jLabel7.setBounds(1090, 340, 57, 25);

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel8.setText("Trạng thái:");
        jPanel2.add(jLabel8);
        jLabel8.setBounds(195, 332, 83, 25);

        txtTenDN.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jPanel2.add(txtTenDN);
        txtTenDN.setBounds(360, 28, 289, 48);

        txtTenDG.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jPanel2.add(txtTenDG);
        txtTenDG.setBounds(1190, 28, 296, 40);

        txtSDT.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jPanel2.add(txtSDT);
        txtSDT.setBounds(1190, 109, 296, 49);

        txtEmail.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jPanel2.add(txtEmail);
        txtEmail.setBounds(1190, 210, 296, 53);

        txtMatKhau.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jPanel2.add(txtMatKhau);
        txtMatKhau.setBounds(360, 140, 289, 49);

        txtXacNhan.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jPanel2.add(txtXacNhan);
        txtXacNhan.setBounds(360, 240, 289, 47);

        rbtnKichHoat.setBackground(new java.awt.Color(255, 255, 255));
        rbtnKichHoat.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        rbtnKichHoat.setText("Kích hoạt");
        jPanel2.add(rbtnKichHoat);
        rbtnKichHoat.setBounds(360, 320, 290, 31);

        rbtnKhongKichHoat.setBackground(new java.awt.Color(255, 255, 255));
        rbtnKhongKichHoat.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        rbtnKhongKichHoat.setText("Không được kích hoạt");
        jPanel2.add(rbtnKhongKichHoat);
        rbtnKhongKichHoat.setBounds(360, 370, 205, 31);

        cbbDiaChi.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        cbbDiaChi.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hà Giang", "Cao Bằng", "Lào Cai", "Sơn La", "Lai Châu", "Bắc Kạn", "Lạng Sơn", "Tuyên Quang", "Yên Bái", "Thái Nguyên", "Điện Biên", "Phú Thọ", "Vĩnh Phúc", "Bắc Giang", "Bắc Ninh", "Hà Nội", "Quảng Ninh", "Hải Dương", "Hải Phòng", "Hòa Bình", "Hưng Yên", "Hà Nam", "Thái Bình", "Nam Định", "Ninh Bình", "Thanh Hóa", "Nghệ An", "Hà Tĩnh", "Quảng Bình", "Quảng Trị", "Thừa Thiên Huế", "Đà Nẵng", "Quảng Nam", "Quảng Ngãi", "KonTum", "Gia Lai", "Bình Định ", "Phú Yên", "Đắk Lắk", "Khánh Hòa", "Đắk Nông", "Lâm Đồng", "Ninh Thuận", "Bình Phước", "Tây Nguyên", "Bình Dương", "Đồng Nai", "Bình Thuận", "TP.Hồ Chí Minh", "Long An", "Bà Rịa - Vũng Tàu", "Đồng Tháp", "An Giang", "Tiền Giang", "Vĩnh Long", "Bến Tre", "Cần Thơ", "Kiên Giang", "Trà Vinh", "Hậu Giang", "Sóc Trăng", "Bạc Liêu", "Cà Mau" }));
        jPanel2.add(cbbDiaChi);
        cbbDiaChi.setBounds(1190, 330, 290, 50);

        btnThem.setBackground(new java.awt.Color(153, 204, 255));
        btnThem.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        btnThem.setForeground(new java.awt.Color(255, 255, 255));
        btnThem.setText("Thêm");
        jPanel2.add(btnThem);
        btnThem.setBounds(800, 360, 140, 60);

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(204, 0, 0));
        jLabel10.setText("Mật khẩu tối thiểu 8 kí tự, tối đa 16 kí tự");
        jPanel2.add(jLabel10);
        jLabel10.setBounds(370, 190, 280, 22);

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(204, 0, 0));
        jLabel11.setText("Tên đang nhập tối đa 7 kí tự");
        jPanel2.add(jLabel11);
        jLabel11.setBounds(366, 82, 280, 22);

        jLabel12.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(204, 0, 0));
        jLabel12.setText("Số điện thoại bắt đầu bằng 0, có 10 số");
        jPanel2.add(jLabel12);
        jLabel12.setBounds(1190, 164, 310, 22);

        jLabel13.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(204, 0, 0));
        jLabel13.setText("VD: Phan Hoàng Sơn");
        jPanel2.add(jLabel13);
        jLabel13.setBounds(1190, 70, 290, 22);

        jLabel14.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(204, 0, 0));
        jLabel14.setText("VD: phanhoangson@gmail.com");
        jPanel2.add(jLabel14);
        jLabel14.setBounds(1190, 260, 308, 41);

        add(jPanel2);
        jPanel2.setBounds(10, 500, 1650, 440);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnThem;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cbbDiaChi;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton rbtnKhongKichHoat;
    private javax.swing.JRadioButton rbtnKichHoat;
    private javax.swing.JTable tableReader;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JPasswordField txtMatKhau;
    private javax.swing.JTextField txtSDT;
    private javax.swing.JTextField txtTenDG;
    private javax.swing.JTextField txtTenDN;
    private javax.swing.JPasswordField txtXacNhan;
    // End of variables declaration//GEN-END:variables

//Class implement MouseListener để thực hiện hành động click chuột phải 
    //thì table sẽ hiện lên menu lựa chọn chức năng xóa hoăc sửa
    private class DisplayMenu implements MouseListener {

        @Override
        public void mouseClicked(MouseEvent e) {
        }

        @Override
        public void mousePressed(MouseEvent e) {
        }

        @Override
        public void mouseReleased(MouseEvent e) {
            if (e.isPopupTrigger()) {
                jPopupMenu1.show(e.getComponent(), e.getX(), e.getY());
            }
        }

        @Override
        public void mouseEntered(MouseEvent e) {
        }

        @Override
        public void mouseExited(MouseEvent e) {
        }

    }

    //Class implements ActionListener để thực hiện hành động bấm thêm và cập nhật
    private class AddAction implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            String command = e.getActionCommand();
            //lấy tên đăng nhập
            String tenDN = txtTenDN.getText().trim();
            //lấy mật khẩu
            String matKhau = new String(txtMatKhau.getPassword()).trim();
            //lấy mật khẩu xác nhận
            String xacNhan = new String(txtXacNhan.getPassword()).trim();
            //lấy trạng thái
            int trangThai = 1;
            if (rbtnKhongKichHoat.isSelected()) {
                trangThai = 0;
            }
            //lấy tên độc giả
            String tenDG = txtTenDG.getText();
            //lấy số điện thoại
            String SDT = txtSDT.getText();
            //lấy email
            String email = txtEmail.getText();
            //lấy địa chỉ
            String diaChi = cbbDiaChi.getSelectedItem().toString();
            if (!tenDN.isEmpty() && !matKhau.isEmpty() && !xacNhan.isEmpty()
                    && !tenDG.isEmpty() && !SDT.isEmpty()
                    && !email.isEmpty()) {
                if (!isValidTenDN(tenDN)) {
                    JOptionPane.showMessageDialog(null,
                            "Tên đăng nhập không đúng định dạng, vui lòng thử lại !!!");
                } else if (!isValidMatKhau(matKhau)) {
                    JOptionPane.showMessageDialog(null,
                            "Mật khẩu không đúng định dạng, vui lòng thử lại !!!");
                } else if (!xacNhan.equals(matKhau)) {
                    JOptionPane.showMessageDialog(null,
                            "Mật khẩu không trùng khớp, vui lòng thử lại !!!");
                } else if (!isValidTenDG(tenDG)) {
                    JOptionPane.showMessageDialog(null,
                            "Hãy điền đầy đủ thông tin Họ tên, vui lòng thử lại !!!");
                } else if (!isValidSDT(SDT)) {
                    JOptionPane.showMessageDialog(null,
                            "Số điện thoại không xác định, vui lòng thử lại !!!");
                } else if (!isValidEmail(email)) {
                    JOptionPane.showMessageDialog(null,
                            "Email không hơp lệ, vui lòng thử lại !!!");
                } else {
                    if (command.equals("Thêm")) {
                        if (emailExists(email, tenDN, "Thêm")) {
                            JOptionPane.showMessageDialog(null,
                                    "Email đã tồn tại !!!");
                        } else if (SDTExists(SDT, tenDN, "Thêm")) {
                            JOptionPane.showMessageDialog(null,
                                    "Số điện thoại đã tồn tại !!!");
                        } else {
                            ReaderDTO reader = new ReaderDTO(tenDN, matKhau,
                                    tenDG, SDT, email, diaChi, trangThai);
                            if (readerBUS.addReader(reader).equals("Thêm thành công !")) {
                                JOptionPane.showMessageDialog(null,
                                        "Thêm thành công !");
                                Date ngayDK = new Date(System.currentTimeMillis());
                                CardDTO card = new CardDTO("Chưa có", tenDN, ngayDK, 0);
                                JOptionPane.showMessageDialog(null, cardBUS.addCard(card));
                                deleteDataInTable();
                                loadDataIntoTable();
                                txtTenDN.setText("");
                                txtMatKhau.setText("");
                                txtXacNhan.setText("");
                                rbtnKichHoat.setSelected(true);
                                txtTenDG.setText("");
                                txtSDT.setText("");
                                txtEmail.setText("");
                                cbbDiaChi.setSelectedIndex(0);
                            } else {
                                JOptionPane.showMessageDialog(null,
                                        readerBUS.addReader(reader));
                            }
                        }
                    } else if (command.equals("Cập nhật")) {
                        if (emailExists(email, tenDN, "Cập nhật")) {
                            JOptionPane.showMessageDialog(null, 
                                    "Email đã tồn tại !!!");
                        } else if (SDTExists(SDT, tenDN, "Cập nhật")) {
                            JOptionPane.showMessageDialog(null, 
                                    "Số điện thoại đã tồn tại !!!");
                        } else {
                            ReaderDTO reader = new ReaderDTO(tenDN, tenDG, matKhau,
                                    SDT, email, diaChi, trangThai);
                            if (readerBUS.updateReader(reader).equals("Cập nhật thành công !")) {
                                JOptionPane.showMessageDialog(null,
                                        "Cập nhật thành công !");
                                deleteDataInTable();
                                loadDataIntoTable();
                                txtTenDN.setText("");
                                txtTenDN.setEnabled(true);
                                txtMatKhau.setText("");
                                txtXacNhan.setText("");
                                rbtnKichHoat.setEnabled(true);
                                rbtnKhongKichHoat.setEnabled(false);
                                rbtnKichHoat.setSelected(true);
                                txtTenDG.setText("");
                                txtSDT.setText("");
                                txtEmail.setText("");
                                cbbDiaChi.setSelectedIndex(0);
                                btnThem.setText("Thêm");
                            } else {
                                JOptionPane.showMessageDialog(null,
                                        readerBUS.updateReader(reader));
                            }
                        }
                    }
                }
            } else {
                //Khi bỏ trống 1 hoặc 2 thông tin
                JOptionPane.showMessageDialog(null,
                        "Vui lòng, không bỏ trống thông tin nào !!!");
            }
        }

        /*Các hàm kiểm tra tín hợp lệ của dữ liệu*/
        private boolean isValidTenDN(String tenDN) {
            return tenDN.matches("^[A-Za-z0-9]{1,7}$");
        }

        private boolean isValidMatKhau(String matKhau) {
            return matKhau.matches("^.{8,16}");
        }

        private boolean isValidTenDG(String tenDG) {
            return tenDG.matches("([A-ZÀÁẠẢÃÂẦẤẬẨẪĂẰẮẶẲẴÈÉẸẺẼÊỀẾỆỂỄÌÍỊỈĨÒÓỌỎÕÔỒỐỘỔỖƠỜỚỢỞỠÙÚỤỦŨƯỪỨỰỬỮỲÝỴỶỸĐ][a-zàáạảãâầấậẩẫăằắặẳẵèéẹẻẽêềếệểễìíịỉĩòóọỏõôồốộổỗơờớợởỡùúụủũưừứựửữỳýỵỷỹđ]+[\\s]+)"
                    + "([A-ZÀÁẠẢÃÂẦẤẬẨẪĂẰẮẶẲẴÈÉẸẺẼÊỀẾỆỂỄÌÍỊỈĨÒÓỌỎÕÔỒỐỘỔỖƠỜỚỢỞỠÙÚỤỦŨƯỪỨỰỬỮỲÝỴỶỸĐ][a-zàáạảãâầấậẩẫăằắặẳẵèéẹẻẽêềếệểễìíịỉĩòóọỏõôồốộổỗơờớợởỡùúụủũưừứựửữỳýỵỷỹđ]+[\\s]*)+");
        }

        private boolean isValidSDT(String SDT) {
            return SDT.matches("^0[0-9]{9}$");
        }

        private boolean isValidEmail(String email) {
            return email.matches("^[A-Za-z]+[\\w._]*@[a-zA-Z]+.com$");
        }

        private boolean emailExists(String email, String tenDN, String cheDo) {
            ArrayList<ReaderDTO> list = readerBUS.getAllReaders();
            if (cheDo.equals("Cập nhật")) {
                int index = -1;
                if (!list.isEmpty()) {
                    for (int i = 0; i < list.size(); i++) {
                        if (tenDN.equals(list.get(i).getTenDN())) {
                            index = i;
                            break;
                        }
                    }

                    for (int i = 0; i < list.size(); i++) {
                        if (i == index) {
                            continue;
                        }
                        if (email.equals(list.get(i).getEmail())) {
                            return true;
                        }
                    }
                }

                return false;
            }

            for (int i = 0; i < list.size(); i++) {
                if (list.get(i).getEmail().equals(email)) {
                    return true;
                }
            }

            return false;
        }

        private boolean SDTExists(String SDT, String tenDN, String cheDo) {
            ArrayList<ReaderDTO> list = readerBUS.getAllReaders();
            if (cheDo.equals("Cập nhật")) {
                int index = -1;
                if (!list.isEmpty()) {
                    for (int i = 0; i < list.size(); i++) {
                        if (tenDN.equals(list.get(i).getTenDN())) {
                            index = i;
                            break;
                        }
                    }

                    for (int i = 0; i < list.size(); i++) {
                        if (i == index) {
                            continue;
                        }
                        if (SDT.equals(list.get(i).getSDT())) {
                            return true;
                        }
                    }
                }
                return false;
            }
            for (int i = 0; i < list.size(); i++) {
                if (list.get(i).getSDT().equals(SDT)) {
                    return true;
                }
            }
            return false;
        }
    }

    //Class implements ActionListener để thực hiện hành động click menu item "Xóa"
    private class removeAction implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            int indexSelected = tableReader.getSelectedRow();
            if (indexSelected != -1) {
                int check = JOptionPane.showConfirmDialog(null,
                        "Bạn chắc chắn muốn xóa không ?", "Xác nhận",
                        JOptionPane.YES_NO_OPTION);
                if (check == JOptionPane.YES_OPTION) {
                    String tenDN = tableModel.getValueAt(indexSelected, 0).toString();
                    ReaderDTO reader = new ReaderDTO(tenDN, "", "", "", "", "", 1);
                    if (readerBUS.removeReader(reader).equals("Xóa thành công !")) {
                        JOptionPane.showMessageDialog(null, "Xóa thành công !");
                        deleteDataInTable();
                        loadDataIntoTable();
                    } else {
                        JOptionPane.showMessageDialog(null,
                                readerBUS.removeReader(reader));
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null,
                        "Vui lòng, chọn dòng dữ liệu cần xóa !!!");
            }

        }

    }

    //Class implements ActionListener để thực hiện hành động click menu item "cập nhật"
    private class UpdateAction implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            int indexSelected = tableReader.getSelectedRow();
            if (indexSelected != -1) {
                txtTenDN.setText(tableModel
                        .getValueAt(indexSelected, 0).toString());
                txtTenDN.setEnabled(false);
                txtMatKhau.setText(tableModel.getValueAt(indexSelected, 1).toString());
                txtMatKhau.setEnabled(true);
                txtXacNhan.setText(tableModel.getValueAt(indexSelected, 1).toString());
                txtXacNhan.setEnabled(true);
                txtTenDG.setText(tableModel.getValueAt(indexSelected, 2).toString());
                txtTenDG.setEnabled(true);
                txtSDT.setText(tableModel.getValueAt(indexSelected, 3).toString());
                txtSDT.setEnabled(true);
                txtEmail.setText(tableModel.getValueAt(indexSelected, 4).toString());
                txtEmail.setEnabled(true);
                String diaChi = tableModel.getValueAt(indexSelected, 5).toString();
                int comboSize = cbbDiaChi.getItemCount();
                for (int i = 0; i < comboSize; i++) {
                    if (diaChi.equals(cbbDiaChi.getItemAt(i))) {
                        cbbDiaChi.setSelectedIndex(i);
                        break;
                    }
                }
                cbbDiaChi.setEnabled(true);
                int trangThai = Integer.parseInt(tableModel.getValueAt(indexSelected, 6).toString());
                rbtnKichHoat.setEnabled(false);
                rbtnKhongKichHoat.setEnabled(false);
                if (trangThai == 1) {
                    rbtnKichHoat.setSelected(true);
                } else {
                    rbtnKhongKichHoat.setSelected(true);
                }
                btnThem.setText("Cập nhật");
            } else {
                JOptionPane.showMessageDialog(null,
                        "Vui lòng, chọn dòng dữ liệu cần cập nhật !!!");
            }
        }

    }

    private class LockAction implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            int indexSelected = tableReader.getSelectedRow();
            if (indexSelected != -1) {
                String tenDN = tableModel.getValueAt(indexSelected, 0).toString();
                int trangThai = Integer.parseInt(tableModel.getValueAt(indexSelected, 6).toString());
                int check = JOptionPane.showConfirmDialog(null,
                        "Bạn chắc chắn muốn khóa tài khoản này không ?",
                        "Xác nhận", JOptionPane.YES_NO_OPTION);
                if (check == JOptionPane.YES_OPTION) {
                    if (trangThai == 1) {
                        ReaderDTO reader = new ReaderDTO(tenDN, "",
                                "", "", "", "", 0);
                        if (readerBUS.lockReader(reader).equals("Khóa thành công !")) {
                            JOptionPane.showMessageDialog(null, "Khóa thành công !");
                            deleteDataInTable();
                            loadDataIntoTable();
                        } else {
                            JOptionPane.showMessageDialog(null,
                                    readerBUS.lockReader(reader));
                        }
                    } else {
                        JOptionPane.showMessageDialog(null,
                                "Tài khoản đã bị khóa !!!");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null,
                        "Vui lòng, chọn tài khoản cần khóa !!!");
            }
        }
    }

    private class UnlockAction implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            int indexSelected = tableReader.getSelectedRow();
            if (indexSelected != -1) {
                String tenDN = tableModel.getValueAt(indexSelected, 0).toString();
                int trangThai = Integer.parseInt(tableModel.getValueAt(indexSelected, 6).toString());
                int check = JOptionPane.showConfirmDialog(null,
                        "Bạn có muốn kích hoạt tài khoản này không ?", "Xác nhận",
                        JOptionPane.YES_NO_OPTION);
                if (check == JOptionPane.YES_OPTION) {
                    if (trangThai == 0) {
                        ReaderDTO reader = new ReaderDTO(tenDN, "", "", "", "", "", 1);
                        if (readerBUS.unlockReader(reader).equals("Kích hoạt thành công !")) {
                            JOptionPane.showMessageDialog(null, "Kích hoạt thành công !");
                            deleteDataInTable();
                            loadDataIntoTable();
                        } else {
                            JOptionPane.showMessageDialog(null,
                                    readerBUS.unlockReader(reader));
                        }
                    } else {
                        JOptionPane.showMessageDialog(null,
                                "Tài khoản đã được kích hoạt !!!");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null,
                        "Vui lòng, chọn tài khoản cần khóa !!!");
            }
        }

    }
}
